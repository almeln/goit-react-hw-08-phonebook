{"version":3,"sources":["redux/auth/auth-selectors.js","components/Navigation/Navigation.js","components/UserMenu/UserMenu.js","components/AuthNav/AuthNav.js","components/AppBar/AppBar.js","components/PrivateRoute.js","components/PublicRoute.js","components/App.jsx","redux/contacts/contacts-reducer.js","redux/auth/auth-slice.js","redux/store.js","index.js","redux/contacts/contacts-operations.js","redux/auth/auth-operations.js","components/Navigation/Navigation.module.css","components/AuthNav/AuthNav.module.css","components/UserMenu/UserMenu.module.css","redux/contacts/contacts-actions.js"],"names":["authSelectors","getIsLoggedIn","state","auth","isLoggedIn","getUsername","user","name","getIsFetchingCurrentUser","isFetchingCurrentUser","Navigation","useSelector","Nav","to","exact","className","css","link","activeClassName","activeLink","UserMenu","dispatch","useDispatch","container","Button","variant","type","onClick","logOut","AuthNav","AppBar","Navbar","bg","Container","PrivateRoute","children","redirectTo","routeProps","PublicRoute","restricted","shouldRedirect","HomeView","lazy","RegisterView","LoginView","ContactsView","App","useEffect","fetchCurrentUser","fallback","path","itemsReducer","createReducer","fetchContacts","fulfilled","_","payload","addContact","deleteContact","filter","id","filterReducer","changeFilter","isLoading","pending","rejected","error","action","contactsReducer","combineReducers","items","authSlice","createSlice","initialState","email","token","extraReducers","register","logIn","authPersistConfig","key","storage","whitelist","store","configureStore","reducer","persistReducer","authReducer","contacts","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById","createAsyncThunk","a","rejectWithValue","axios","get","data","number","contact","post","contactId","delete","defaults","baseURL","headers","common","Authorization","credentials","thunkAPI","getState","persistedToken","console","log","module","exports","createAction"],"mappings":"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","file":"static/js/main.823b7349.chunk.js","sourcesContent":["const getIsLoggedIn = state => state.auth.isLoggedIn;\r\n\r\nconst getUsername = state => state.auth.user.name;\r\n\r\nconst getIsFetchingCurrentUser = state => state.auth.isFetchingCurrentUser;\r\n\r\nconst authSelectors = {\r\n  getIsLoggedIn,\r\n  getUsername,\r\n  getIsFetchingCurrentUser,\r\n};\r\n\r\nexport default authSelectors;","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { NavLink } from 'react-router-dom';\r\nimport authSelectors from 'redux/auth/auth-selectors';\r\nimport { Nav } from 'react-bootstrap';\r\nimport css from './Navigation.module.css';\r\n\r\nconst Navigation = () => {\r\n  const isLoggedIn = useSelector(authSelectors.getIsLoggedIn);\r\n  \r\n  return (\r\n    <Nav>\r\n      <NavLink to=\"/\" exact className={css.link} activeClassName={css.activeLink}>\r\n        Home\r\n      </NavLink>\r\n  \r\n      {isLoggedIn && (\r\n        <NavLink\r\n        to=\"/contacts\"\r\n        exact\r\n        className={css.link}\r\n        activeClassName={css.activeLink}\r\n        >\r\n          Contacts\r\n        </NavLink>\r\n      )}\r\n    </Nav>\r\n  );\r\n}\r\n\r\nexport default Navigation;","import { useDispatch, useSelector } from 'react-redux';\r\nimport authSelectors from 'redux/auth/auth-selectors';\r\nimport { logOut } from 'redux/auth/auth-operations';\r\nimport Button from 'react-bootstrap/Button';\r\nimport css from './UserMenu.module.css';\r\n\r\nexport default function UserMenu() {\r\n  const dispatch = useDispatch();\r\n  const name = useSelector(authSelectors.getUsername);\r\n\r\n  return (\r\n    <div className={css.container}>\r\n      <span className={css.name}>Welcome, {name}</span>\r\n      <Button variant=\"outline-info\" type=\"button\" onClick={() => dispatch(logOut())}>\r\n        Log Out\r\n      </Button>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport css from './AuthNav.module.css';\r\n\r\nexport default function AuthNav() {\r\n  return (\r\n    <div>\r\n      <NavLink\r\n        to=\"/register\"\r\n        exact\r\n        className={css.link}\r\n        activeClassName={css.activeLink}\r\n      >\r\n        Registration\r\n      </NavLink>\r\n      <NavLink\r\n        to=\"/login\"\r\n        exact\r\n        className={css.link}\r\n        activeClassName={css.activeLink}\r\n      >\r\n        Login\r\n      </NavLink>\r\n    </div>\r\n  );\r\n}","import { useSelector } from 'react-redux';\r\nimport Navigation from 'components/Navigation';\r\nimport UserMenu from 'components/UserMenu';\r\nimport AuthNav from 'components/AuthNav';\r\nimport authSelectors from 'redux/auth/auth-selectors';\r\nimport { Container, Navbar } from 'react-bootstrap';\r\n\r\nexport default function AppBar() {\r\n  const isLoggedIn = useSelector(authSelectors.getIsLoggedIn);\r\n  return (\r\n    <Navbar bg=\"light\" variant=\"light\">\r\n      <Container>\r\n        <Navigation />\r\n        {isLoggedIn ? <UserMenu /> : <AuthNav />}\r\n      </Container>\r\n    </Navbar>\r\n  );\r\n}","import { useSelector } from \"react-redux\";\r\nimport { Route, Redirect } from \"react-router\";\r\nimport authSelectors from \"redux/auth/auth-selectors\";\r\n\r\n\r\n/**\r\n * 1. Он должен повторять API Route\r\n *  2. Он должен рендерить Route\r\n * - Если маршрут приватный и пользователь залогинен, рендерит компонент\r\n * - В противном случае рендерит Redirect на redirectTo\r\n */\r\n\r\nexport default function PrivateRoute({\r\n    children,\r\n    redirectTo = '/',\r\n    ...routeProps \r\n}) {\r\n    const isLoggedIn = useSelector(authSelectors.getIsLoggedIn);\r\n    return (\r\n        <Route {...routeProps}>\r\n            {isLoggedIn ? children : <Redirect to={redirectTo} />}\r\n        </Route>\r\n    );\r\n}","import { useSelector } from \"react-redux\";\r\nimport { Redirect, Route } from \"react-router\";\r\nimport authSelectors from \"redux/auth/auth-selectors\";\r\n\r\n/**\r\n * - Если маршрут ограниченный, и юзер залогинен, рендерит редирект на redirectTo\r\n * - В противном случае рендерит компонент\r\n *\r\n */\r\n\r\nexport default function PublicRoute({ \r\n    children,\r\n    restricted = false,\r\n    redirectTo = '/',\r\n    ...routeProps\r\n}) {\r\n    const isLoggedIn = useSelector(authSelectors.getIsLoggedIn);\r\n    const shouldRedirect = isLoggedIn && restricted;\r\n    return (\r\n        <Route {...routeProps}>\r\n            {shouldRedirect ? <Redirect to={redirectTo}/> : children}\r\n        </Route>\r\n    );\r\n}","import React from 'react';\r\nimport { useEffect, Suspense, lazy } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Switch } from 'react-router-dom';\r\nimport AppBar from './AppBar';\r\n// import Container from './Container';\r\nimport Container from 'react-bootstrap/Container'\r\nimport { fetchCurrentUser } from '../redux/auth/auth-operations';\r\nimport PrivateRoute from './PrivateRoute';\r\nimport PublicRoute from './PublicRoute';\r\nimport authSelectors from 'redux/auth/auth-selectors';\r\n\r\nconst HomeView = lazy(() => import('views/HomeView'));\r\nconst RegisterView = lazy(() => import('views/RegisterView'));\r\nconst LoginView = lazy(() => import('views/LoginView'));\r\nconst ContactsView = lazy(() => import('views/ContactsView'));\r\n\r\nexport default function App() {\r\n    const dispatch = useDispatch();\r\n    const isFetchingCurrentUser = useSelector(authSelectors.getIsFetchingCurrentUser);\r\n  \r\n    useEffect(() => {\r\n      dispatch(fetchCurrentUser());\r\n    }, [dispatch]);\r\n  \r\n    return (\r\n      !isFetchingCurrentUser && (\r\n        <>\r\n        <AppBar />\r\n        <Container>  \r\n        <Switch>\r\n          <Suspense fallback={<p>Loading...</p>}>\r\n            <PublicRoute exact path=\"/\">\r\n              <HomeView/>\r\n            </PublicRoute>\r\n            <PublicRoute exact path=\"/register\" restricted>\r\n              <RegisterView/>\r\n            </PublicRoute>\r\n            <PublicRoute exact path=\"/login\" redirectTo=\"/contacts\" restricted>\r\n              <LoginView/>\r\n            </PublicRoute>\r\n            <PrivateRoute path=\"/contacts\" redirectTo=\"/login\">\r\n              <ContactsView />\r\n            </PrivateRoute>         \r\n          </Suspense>\r\n        </Switch>\r\n        </Container>\r\n        </>\r\n      )\r\n    );\r\n  };","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport {\n  fetchContacts,\n  addContact,\n  deleteContact,\n} from './contacts-operations';\nimport { changeFilter } from './contacts-actions';\n\nconst itemsReducer = createReducer([], {\n  [fetchContacts.fulfilled]: (_, { payload }) => payload,\n  [addContact.fulfilled]: (state, { payload }) => [payload, ...state],\n  [deleteContact.fulfilled]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filterReducer = createReducer('', {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nconst isLoading = createReducer(false, {\n  [fetchContacts.pending]: () => true,\n  [fetchContacts.fulfilled]: () => false,\n  [fetchContacts.rejected]: () => false,\n  [addContact.pending]: () => true,\n  [addContact.fulfilled]: () => false,\n  [addContact.rejected]: () => false,\n  [deleteContact.pending]: () => true,\n  [deleteContact.fulfilled]: () => false,\n  [deleteContact.rejected]: () => false,\n});\n\nconst error = createReducer(null, {\n  [fetchContacts.rejected]: (_, action) => action.payload,\n  [fetchContacts.pending]: () => null,\n});\n\nexport const contactsReducer = combineReducers({\n  items: itemsReducer,\n  filter: filterReducer,\n  isLoading,\n  error,\n});\n\n\n// without createAsyncChunk\n\n// const itemsReducer = createReducer([], {\n//   [fetchContactsSuccess]: (_, { payload }) => payload,\n//   [addContactSuccess]: (state, { payload }) => [payload, ...state],\n//   [deleteContactSuccess]: (state, { payload }) =>\n//     state.filter(({ id }) => id !== payload),\n// });\n\n// const filterReducer = createReducer('', {\n//   [changeFilter]: (_, { payload }) => payload,\n// });\n\n// const isLoading = createReducer(false, {\n//   [fetchContactsRequest]: () => true,\n//   [fetchContactsSuccess]: () => false,\n//   [fetchContactsError]: () => false,\n// });\n\n// const error = createReducer(null, {\n//   [fetchContactsError]: (_, action) => action.payload,\n//   [fetchContactsRequest]: () => null,\n// });","import { createSlice } from '@reduxjs/toolkit';\r\nimport { register, logIn, logOut, fetchCurrentUser } from './auth-operations';\r\n\r\nconst initialState = {\r\n  user: { name: null, email: null },\r\n  token: null,\r\n  isLoggedIn: false,\r\n  isFetchingCurrentUser: false,\r\n};\r\n\r\nconst authSlice = createSlice({\r\n  name: 'auth',\r\n  initialState,\r\n  extraReducers: {\r\n    [register.fulfilled](state, action) {\r\n      state.user = action.payload.user;\r\n      state.token = action.payload.token;\r\n      state.isLoggedIn = true;\r\n    },\r\n    [logIn.fulfilled](state, action) {\r\n      state.user = action.payload.user;\r\n      state.token = action.payload.token;\r\n      state.isLoggedIn = true;\r\n    },\r\n    [logOut.fulfilled](state) {\r\n      state.user = { name: null, email: null };\r\n      state.token = null;\r\n      state.isLoggedIn = false;\r\n    },\r\n    [fetchCurrentUser.pending](state) {\r\n      state.isFetchingCurrentUser = true;\r\n    },\r\n    [fetchCurrentUser.fulfilled](state, action) {\r\n      state.user = action.payload;\r\n      state.isLoggedIn = true;\r\n      state.isFetchingCurrentUser = false;\r\n    },\r\n    [fetchCurrentUser.rejected](state) {\r\n      state.isFetchingCurrentUser = false;\r\n    }\r\n  },\r\n});\r\n\r\nexport default authSlice.reducer;","import { configureStore } from '@reduxjs/toolkit';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport logger from 'redux-logger';\nimport storage from 'redux-persist/lib/storage'; // defaults to localStorage for web\nimport { contactsReducer } from './contacts/contacts-reducer';\nimport authReducer from './auth/auth-slice';\n\nconst middleware = getDefaultMiddleware => [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nconst authPersistConfig = {\n  key: 'auth',\n  storage,\n  whitelist: ['token'],\n};\n\nexport const store = configureStore({\n  reducer: {\n    auth: persistReducer(authPersistConfig, authReducer),\n    contacts: contactsReducer,\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nexport const persistor = persistStore(store);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { Provider } from 'react-redux';\nimport App from './components/App';\nimport { store, persistor } from 'redux/store';\nimport 'modern-normalize/modern-normalize.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\nexport const fetchContacts = createAsyncThunk(\n  'contacts/fetchContacts',\n  async (_, { rejectWithValue }) => {\n    try {\n      const { data } = await axios.get('/contacts');\n      return data;\n    } catch (error) {\n      return rejectWithValue(error);\n    }\n  },\n);\n\nexport const addContact = createAsyncThunk(\n  'contacts/addContact',\n  async ({ name, number }, { rejectWithValue }) => {\n    const contact = {\n      name,\n      number,\n    };\n    try {\n      const { data } = await axios.post('/contacts', contact);\n      return data;\n    } catch (error) {\n      return rejectWithValue(error);\n    }\n  },\n);\n\nexport const deleteContact = createAsyncThunk(\n  'contacts/deleteContact',\n  async (contactId, { rejectWithValue }) => {\n    try {\n      await axios.delete(`/contacts/${contactId}`);\n      return contactId;\n    } catch (error) {\n      return rejectWithValue(error);\n    }\n  },\n);\n\n// without createAsyncChunk\n\n// export const fetchContacts = () => async dispatch => {\n//   dispatch(fetchContactsRequest());\n\n//   try {\n//     const { data } = await axios.get('/contacts');\n//     dispatch(fetchContactsSuccess(data));\n//   } catch (error) {\n//     dispatch(fetchContactsError(error));\n//   }\n// };\n\n// export const addContact =\n//   ({ name, number }) =>\n//   async dispatch => {\n//     const contact = {\n//       name,\n//       number,\n//     };\n\n//     dispatch(addContactRequest());\n\n//     try {\n//       const { data } = await axios.post('/contacts', contact);\n//       dispatch(addContactSuccess(data));\n//     } catch (error) {\n//       dispatch(addContactError(error));\n//     }\n//   };\n\n// export const deleteContact = contactId => async dispatch => {\n//   dispatch(deleteContactRequest());\n\n//   try {\n//     await axios.delete(`/contacts/${contactId}`);\n//     dispatch(deleteContactSuccess(contactId));\n//   } catch (error) {\n//     dispatch(deleteContactError(error));\n//   }\n// };\n","import axios from 'axios';\r\nimport { createAsyncThunk } from '@reduxjs/toolkit';\r\n\r\naxios.defaults.baseURL = 'https:/connections-api.herokuapp.com';\r\n\r\nconst token = {\r\n    set(token) {\r\n        axios.defaults.headers.common.Authorization = `Bearer ${token}`;\r\n    },\r\n    unset() {\r\n        axios.defaults.headers.common.Authorization = '';\r\n    },\r\n};\r\n\r\nexport const register = createAsyncThunk('auth/register', async credentials => {\r\n    try {\r\n      const { data } = await axios.post('/users/signup', credentials);\r\n      token.set(data.token);\r\n      return data;\r\n    } catch (error) {\r\n      // TODO: Добавить обработку ошибки error.message\r\n    }\r\n});\r\n\r\nexport const logIn = createAsyncThunk('auth/login', async credentials => {\r\n    try {\r\n      const { data } = await axios.post('/users/login', credentials);\r\n      token.set(data.token);\r\n      return data;\r\n    } catch (error) {\r\n      // TODO: Добавить обработку ошибки error.message\r\n    }\r\n});\r\n\r\nexport const logOut = createAsyncThunk('auth/logout', async () => {\r\n    try {\r\n        await axios.post('/users/logout');\r\n        token.unset();\r\n    } catch (error) {\r\n        // TODO: Добавить обработку ошибки error.message\r\n    }\r\n});\r\n\r\nexport const fetchCurrentUser = createAsyncThunk(\r\n    'auth/refresh',\r\n    async (_, thunkAPI) => {\r\n        const state = thunkAPI.getState();\r\n        const persistedToken = state.auth.token;\r\n\r\n        if (persistedToken === null) {\r\n            console.log('No token!');\r\n            return thunkAPI.rejectWithValue();\r\n        }\r\n\r\n        token.set(persistedToken);\r\n        try {\r\n            const { data } = await axios.get('/users/current');\r\n            return data;\r\n        } catch (error) {\r\n            // TODO: Добавить обработку ошибки error.message\r\n        }\r\n    }\r\n)\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"link\":\"Navigation_link__r_qzW\",\"activeLink\":\"Navigation_activeLink__20o-q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"link\":\"AuthNav_link__QjiLM\",\"activeLink\":\"AuthNav_activeLink__3563Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"UserMenu_container__2X8rT\",\"name\":\"UserMenu_name__3GTal\"};","import { createAction } from '@reduxjs/toolkit';\n\nexport const fetchContactsRequest = createAction(\n  'contacts/fetchContactsRequest',\n);\nexport const fetchContactsSuccess = createAction(\n  'contacts/fetchContactsSuccess',\n);\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\n\nexport const addContactRequest = createAction('contacts/addContactRequest');\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\nexport const addContactError = createAction('contacts/addContactError');\n\n\nexport const deleteContactRequest = createAction(\n  'contacts/deleteContactRequest',\n);\nexport const deleteContactSuccess = createAction(\n  'contacts/deleteContactSuccess',\n);\nexport const deleteContactError = createAction('contacts/deleteContactError');\n\nexport const changeFilter = createAction('contacts/filter');\n"],"sourceRoot":""}